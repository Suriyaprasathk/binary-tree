#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *left,*right;
};
struct node *create()
{
	int x;
	struct node *root;
	struct node *newnode=(struct node*)malloc(sizeof(struct node));
	printf("\nenter the value to insert(press -1 to no node):\n");
	scanf("%d",&x);
	if(x==-1)
	{
		return NULL;
	}
		newnode->data=x;
		printf("\nenter the left child of %d\n",x);
		newnode->left=create();
		printf("\nenter the right child of %d\n",x);
		newnode->right=create();
		return newnode;
}
void preorder(struct node*root)
 {
 	if(root==NULL)
 	{
 		return;
	}
	else
	 {
	 	printf("%d->",root->data);
	 	preorder(root->left);
	 	preorder(root->right);
	 }
  }
  
 void inorder(struct node *root)
 {
 	if(root==NULL)
 	{
 		return;
	}
	else
	 {
	 	inorder(root->left);
	 	printf("%d->",root->data);
	 	inorder(root->right);
	 }
}

 void postorder(struct node *root)
 {
 	if(root==NULL)
 	{
 		return;
	}
	else
	 {
	 	postorder(root->left);
	 	postorder(root->right);
	 	printf("%d->",root->data);
	 }
}
int main()
{
	struct node *root;
	root=NULL;
	int choice=1,x;
	while(choice){
	printf("\nenter 1 to insert\nenter 2 to display\npress 3 to quit");
	printf("\nenter the choice\n");
	scanf("%d",&choice);
	switch(choice)
	{
		case 1:
			root=create();
			break;
		case 2:
			printf("inorder traversal\n");
			inorder(root);
			printf("\n");
			printf("preorder traversal\n");
			preorder(root);
			printf("\n");
			printf("postorder traversal\n");
			postorder(root);
			break;
		case 3:
			return choice=0;
			break;
		default:
			printf("enter the valid choice");
	}
}
}
